"""
Django settings for mysite project.

Generated by 'django-admin startproject' using Django 5.0.7.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""

from pathlib import Path
import environ
import os

# 初始化环境变量
env = environ.Env(
    # 设置DEBUG类型转换和默认值
    DEBUG=(bool, False),
    DB_TYPE=(str, "mysql"),
    DB_MYSQL_HOST=(str, "localhost"),
    DB_MYSQL_NAME=(str, ""),
    DB_MYSQL_USER=(str, "root"),
    DB_MYSQL_PASSWORD=(str, ""),
    DB_MYSQL_PORT=(int, 3306),
)

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# 读取.env文件
environ.Env.read_env(Path.joinpath(BASE_DIR, ".env"))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "django-insecure-x+7q-+alh=!7eiykoj=8(8z9hr9+nagn)&zgz@ebl5fw4ql-9!"

# SECURITY WARNING: don't run with debug turned on in production!
# 从.env文件中读取DEBUG的值
DEBUG = env("DEBUG")

# 允许访问的HOST，*表示所有，也可以设置为127.0.0.1或者localhost来表示仅允许本地HOST访问。
# 更多说明可参阅 https://docs.djangoproject.com/zh-hans/5.0/ref/settings/#allowed-hosts
ALLOWED_HOSTS = ["*"]


# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "drf_yasg",
    "demo",
    "account",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "mysite.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "mysite.wsgi.application"


# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases

if env("DB_TYPE") == "sqlite":
    # SQLite配置
    DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.sqlite3",
            "NAME": BASE_DIR / "db.sqlite3",
        }
    }
else:
    DATABASES = {
        # MySQL配置
        "default": {
            "ENGINE": "django.db.backends.mysql",
            # 数据库名称
            "NAME": env("DB_MYSQL_NAME"),
            # 数据库登录账号
            "USER": env("DB_MYSQL_USER"),
            # 数据库登录密码
            "PASSWORD": env("DB_MYSQL_PASSWORD"),
            # 数据库主机地址
            "HOST": env("DB_MYSQL_HOST"),
            # 数据库主机端口号
            "PORT": env("DB_MYSQL_PORT"),
        }
    }


# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "Asia/Shanghai"

USE_I18N = True

USE_TZ = False


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/

STATIC_URL = "static/"

# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# 额外添加的配置项
REST_FRAMEWORK = {
    # 解决浏览器直接打开GET请求的URL显示TemplateDoesNotExist的异常。
    # 这是因为Swagger、Postman等工具的接收 (Accept) 头部为application/json；
    # 而浏览器的接收 (Accept) 头部为text/html；
    "DEFAULT_RENDERER_CLASSES": [
        "rest_framework.renderers.JSONRenderer",
    ],
    # 全局异常处理
    "EXCEPTION_HANDLER": "mysite.utils.exceptions.global_exception_handler",
}

# 登录Token有效时长（天）
ACCESS_TOKEN_KEEPTIME = 30
# 前端登录密码的盐值
LOGIN_SALT = "hs43ay78"

# Swagger设置
SWAGGER_SETTINGS = {
    # 设置Swagger页面Authorize按钮中的表单
    "SECURITY_DEFINITIONS": {
        "loginUid": {
            "type": "apiKey",
            "name": "Login-Uid",
            "in": "header",
        },
        "accessToken": {
            "type": "apiKey",
            "name": "Access-Token",
            "in": "header",
        },
    }
}

# 日志输出目录
LOG_OUTPUT_DIR = os.path.join(BASE_DIR, "log/")
# 是否启动日志
LOGGING_ENABLED = True
# 根据LOGGING_ENABLED来控制是否启用日志
if LOGGING_ENABLED:
    # 启动日志的配置
    LOGGING = {
        "version": 1,
        "disable_existing_loggers": False,
        "formatters": {
            "verbose": {
                "format": "{levelname} {asctime} {module} {message}",
                "style": "{",
            },
            "simple": {
                "format": "{levelname} {message}",
                "style": "{",
            },
        },
        "handlers": {
            # 控制台输出的配置
            "console": {
                "level": "DEBUG",
                "class": "logging.StreamHandler",
                "formatter": "verbose",
            },
            # access.log文件的输出的配置
            "access_log_file": {
                "level": "INFO",
                "class": "mysite.utils.fileHandlers.LogDataRotatingFileHandler",
                "base_filename": os.path.join(LOG_OUTPUT_DIR, "access.log"),
                "when": "midnight",
                "interval": 1,
                "formatter": "verbose",
            },
            # error.log文件的输出的配置
            "error_log_file": {
                "level": "ERROR",
                "class": "mysite.utils.fileHandlers.LogDataRotatingFileHandler",
                "base_filename": os.path.join(LOG_OUTPUT_DIR, "error.log"),
                "when": "midnight",
                "interval": 1,
                "formatter": "verbose",
            },
        },
        "loggers": {
            "django": {
                "handlers": ["access_log_file"],
                "level": "INFO",
                "propagate": False,
            },
            "django.request": {
                "handlers": ["error_log_file"],
                "level": "ERROR",
                "propagate": False,
            },
            "uvicorn.access": {
                "handlers": ["access_log_file"],
                "level": "INFO",
                "propagate": False,
            },
            "uvicorn.error": {
                "handlers": ["error_log_file"],
                "level": "ERROR",
                "propagate": False,
            },
        },
    }
    # 当.env文件中的环境变量DEBUG为True时，将日志信息同步输出在控制台
    if DEBUG:
        for logger in LOGGING["loggers"].values():
            logger["handlers"].append("console")
